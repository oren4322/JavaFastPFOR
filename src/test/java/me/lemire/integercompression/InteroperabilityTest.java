package me.lemire.integercompression;

import java.util.Random;

import org.junit.Assert;
import org.junit.Test;

import me.lemire.integercompression.differential.IntegratedIntCompressor;

public class InteroperabilityTest {

	private static final IntegratedIntCompressor iic = new IntegratedIntCompressor();

	@Test
	public void checkBig() {
		// int max = 352;
		int[] input = new int[] { 1017661, 1017971, 1019156, 1023038, 1025292, 1028219, 1030387, 1032734, 1033804,
				1034294, 1034566, 1038456, 1039019, 1040309, 1041918, 1044202, 1047762, 1052235, 1057176, 1060193,
				1060268, 1061590, 1066727, 1066814, 1067129, 1068679, 1068912, 1071014, 1072613, 1073210, 1073404,
				1075908, 1076778, 1080190, 1082265, 1082718, 1085329, 1087254, 1099124, 1100958, 1104291, 1106338,
				1108187, 1108907, 1109625, 1110792, 1111467, 1116210, 1117122, 1118901, 1121931, 1125946, 1129601,
				1133521, 1135575, 1144243, 1147545, 1149399, 1149958, 1151693, 1163048, 1164335, 1165446, 1165644,
				1165673, 1167222, 1176873, 1177117, 1177180, 1181676, 1183208, 1183250, 1188820, 1189037, 1192282,
				1192852, 1192936, 1193889, 1197978, 1202659, 1206746, 1207119, 1207450, 1207743, 1212479, 1216162,
				1221442, 1235491, 1236364, 1239420, 1240667, 1241156, 1245866, 1248629, 1251735, 1257771, 1270570,
				1274623, 1275548, 1277922, 1278928, 1281284, 1291094, 1294554, 1295029, 1301238, 1303036, 1305002,
				1307282, 1311836, 1318281, 1320137, 1328398, 1328674, 1329040, 1330556, 1330562, 1337390, 1338203,
				1338203, 1346441, 1348635, 1348931, 1350414, 1350560, 1351977, 1354687, 1355166, 1358251, 1358857,
				1360130, 1362319, 1366267, 1367529, 1370207, 1370830, 1376176, 1377955, 1378188, 1378517, 1384020,
				1384997, 1388209, 1391138, 1394546, 1394666, 1395159, 1400012, 1407636, 1409920, 1410351, 1412826,
				1413395, 1415255, 1418827, 1421456, 1422511, 1426293, 1427474, 1433351, 1433446, 1441644, 1441752,
				1443835, 1444168, 1451472, 1458766, 1460428, 1465518, 1468642, 1474115, 1476435, 1478993, 1480081,
				1480894, 1482641, 1485397, 1488012, 1490240, 1493571, 1495401, 1506514, 1514206, 1520070, 1520216,
				1521468, 1521790, 1522491, 1525092, 1527509, 1528803, 1532999, 1534629, 1539435, 1542289, 1545378,
				1548868, 1549706, 1553782, 1556215, 1558783, 1561610, 1566078, 1567213, 1569279, 1572129, 1573160,
				1577347, 1578016, 1580808, 1581894, 1582217, 1586061, 1587780, 1588292, 1589741, 1595020, 1595048,
				1595394, 1597894, 1604634, 1606513, 1611137, 1613879, 1616118, 1618448, 1626226, 1627848, 1628099,
				1628371, 1629856, 1633868, 1640302, 1641069, 1641086, 1646587, 1648451, 1665782, 1668493, 1678682,
				1679252, 1682115, 1682893, 1687456, 1693072, 1702964, 1704501, 1705462, 1705608, 1706445, 1712786,
				1713792, 1715384, 1715441, 1715912, 1717443, 1721415, 1722638, 1725976, 1729882, 1736430, 1738589,
				1746623, 1747856, 1758697, 1761685, 1761963, 1762410, 1766659, 1768274, 1768446, 1768746, 1770898,
				1771088, 1771389, 1783072, 1788404, 1790584, 1791707, 1793147, 1793192, 1795937, 1799965, 1800699,
				1804559, 1807733, 1811685, 1813515, 1814788, 1831340, 1832892, 1833180, 1833999, 1838294, 1848343,
				1851131, 1851350, 1856422, 1859811, 1860344, 1866683, 1871173, 1871227, 1871388, 1871948, 1872473,
				1875638, 1880345, 1881222, 1883588, 1886516, 1887773, 1889970, 1896660, 1897121, 1898776, 1902070,
				1904307, 1905446, 1907622, 1908938, 1915665, 1917018, 1917845, 1920103, 1922824, 1923911, 1925338,
				1925539, 1926601, 1927522, 1927739, 1932280, 1936892, 1940446, 1946801, 1947036, 1948748, 1952273,
				1953261, 1955521, 1956398, 1962249, 1971532, 1974517, 1975076, 1975197, 1978694, 1984061, 1984219,
				1993694, 1998559 };
		// int[] input = new int[max];
		// for (int i = 0; i < max; i++) {
		// input[i] = i;
		// }
		checkBig2Inner(input);
	}

	@Test
	public void checkBig2() {
		int max = 123;
		int[] input = new int[max];
		Random segmentsRadom = new Random();
		for (int i = 0; i < max; i++) {
			input[i] = segmentsRadom.nextInt(100000);
		}
		checkBig2Inner(input);
	}

	/**
	 * @param input
	 */
	private void checkBig2Inner(int[] input) {
		int[] compressed = iic.compress(input);
		Assert.assertArrayEquals(input, iic.uncompress(compressed));
	}

	@Test
	public void checkBelow32() {
		int[] input = new int[] { 1032603, 1089389, 1128660, 1185468, 1207605, 1398831, 1545539, 1675147, 1712693,
				1712798, 1754718, 1764514, 1782730, 1798137, 1823045, 1824284, 1840199, 1846208, 1885462, 1933834 };
		int[] compressed = iic.compress(input);
		int[] expecteds = new int[] { 0, 1388249883, 845644603, -2093258622, 2055285881, 2048166741, -2022422392,
				-377346774, 1149388608, -2129778484, 1112340527, 730421121, 1454275068, 2037678642, 130 };
		Assert.assertArrayEquals(expecteds, compressed);
		Assert.assertArrayEquals(input, iic.uncompress(compressed));
	}

	@Test
	public void check32() {
		int[] input = new int[] { 1026184, 1040085, 1055745, 1080731, 1092735, 1100699, 1119130, 1120171, 1170668,
				1175122, 1211996, 1254380, 1272156, 1323908, 1328362, 1379480, 1383035, 1429552, 1434933, 1460580,
				1463144, 1466106, 1466973, 1600128, 1621752, 1632229, 1721570, 1730858, 1764646, 1880731, 1904770,
				1917346 };
		int[] compressed = iic.compress(input);
		int[] expecteds = new int[] { 32, 335544320, 1692379272, -1606603773, 786695705, -16649792, 4264007, 375440705,
				9439745, 1164970585, 1712104064, 209379345, 1531973091, -267057909, 168035906, 1660991776, 545402883,
				-1898949512, -2124612350, -2080636348, -417573040, 51511389 };
		Assert.assertArrayEquals(expecteds, compressed);
		Assert.assertArrayEquals(input, iic.uncompress(compressed));
	}

	@Test
	public void checkBetween32And64() {
		int[] input = new int[] { 1009672, 1010847, 1017001, 1046793, 1053953, 1062256, 1066635, 1074807, 1077523,
				1110680, 1125000, 1163908, 1171481, 1198380, 1229291, 1262733, 1267857, 1271323, 1278687, 1355118,
				1380642, 1396982, 1423829, 1433694, 1434001, 1438381, 1448923, 1453338, 1502432, 1517629, 1527589,
				1532138, 1542067, 1555660, 1568354, 1595177, 1602646, 1613120, 1628592, 1639806, 1648783, 1656741,
				1668780, 1702989, 1712927, 1723410, 1724193, 1729373, 1785461, 1808055, 1820425, 1830887, 1838285,
				1845557, 1861945, 1864755, 1865464, 1897293, 1907222, 1937003, 1939482, 1958234 };
		int[] compressed = iic.compress(input);
		int[] expecteds = new int[] { 32, 335544320, 1233086472, 1575424, 469239622, 453117680, 33472529, 407898780,
				-1070075896, 496306559, -1090088656, 136978552, -660597756, -266550272, 1672745640, -553386688,
				40407144, 297795891, -265736703, -1077542637, -402410032, 18632742, 433983283, 1206064874, -1171422895,
				-126824086, -971909298, -569917930, 1384254241, 265384909, 413678726, 809665334, 1591759489, 1756980945,
				-2130705224, -2059037318, 1233221717, -2123868723, 306221871, 129 };
		Assert.assertArrayEquals(expecteds, compressed);
		Assert.assertArrayEquals(input, iic.uncompress(compressed));
	}

	@Test
	public void check128() {
		int[] input = new int[] { 1005853, 1006063, 1008732, 1011910, 1036820, 1041300, 1046012, 1056595, 1062386,
				1064561, 1110044, 1120009, 1124016, 1127093, 1129532, 1130576, 1168190, 1169301, 1183890, 1185481,
				1186069, 1187162, 1199772, 1201054, 1205304, 1223225, 1223862, 1227834, 1239707, 1266307, 1275613,
				1277808, 1279892, 1292186, 1306245, 1307935, 1308722, 1321024, 1322668, 1332956, 1336695, 1357146,
				1361474, 1373019, 1390597, 1400693, 1404290, 1405521, 1422775, 1432837, 1443567, 1444865, 1456558,
				1468436, 1474985, 1481313, 1503267, 1511076, 1517356, 1521079, 1530986, 1545244, 1560797, 1562230,
				1567535, 1598479, 1613768, 1618971, 1619462, 1633433, 1642686, 1647967, 1648943, 1653643, 1657265,
				1664517, 1685992, 1687708, 1693103, 1695069, 1699408, 1699478, 1721477, 1728547, 1730065, 1733384,
				1734317, 1738686, 1742237, 1745998, 1747155, 1773999, 1777838, 1779235, 1792752, 1797223, 1810613,
				1816735, 1821396, 1823075, 1835070, 1835577, 1840421, 1844466, 1849844, 1852075, 1854519, 1859294,
				1873435, 1873678, 1887039, 1902492, 1909987, 1923396, 1927073, 1929797, 1929854, 1935483, 1940606,
				1945879, 1958579, 1967346, 1973881, 1985736, 1988123, 1993349, 1995718, 1996834 };
		int[] compressed = iic.compress(input);
		int[] expecteds = new int[] { 128, 336531214, 221206813, -1609929472, 1632501958, 1744902144, 43347986,
				-2014308705, -793662720, 262603374, -2029993904, 4276233, 1165005550, 1882782976, 38535267, 1107313744,
				5251121, 1611665562, 1073904900, 778109176, 1510375040, 8990756, -670889948, 819154362, -1316982735,
				-1689231335, 975696270, 1252369188, 943012740, 1130760606, 1249547175, 853201058, 1885754739,
				1087750705, -781835761, -1114477775, 187888389, 2087720121, -1299550482, -1783326690, -802602352,
				-1987498493, 1043565187, 1414280613, 284364636, -713310173, -1201740941, 571380839, 1485692706,
				461447495, 732491773, 586076980, 1442493518, -619037405, 784367342, -721273035, -1667710419, 1022836042,
				-243842288, -585605817, 959090917, 1077247808, -241413531, 1033402511, 445207481, 292590613 };
		Assert.assertArrayEquals(expecteds, compressed);
		Assert.assertArrayEquals(input, iic.uncompress(compressed));
	}

	@Test
	public void checkBetween128And256() {
		int[] input = new int[] { 1008319, 1014414, 1019605, 1026824, 1033600, 1034878, 1035737, 1037364, 1042568,
				1059233, 1068600, 1072210, 1081326, 1082696, 1086541, 1104728, 1105891, 1115204, 1138823, 1139945,
				1140497, 1144847, 1151267, 1157926, 1162565, 1163894, 1164038, 1176138, 1176263, 1202571, 1204556,
				1206385, 1212992, 1224136, 1231374, 1235824, 1237303, 1238009, 1248601, 1249081, 1256818, 1257985,
				1261910, 1267516, 1314405, 1323544, 1331989, 1337255, 1338660, 1351777, 1352540, 1367715, 1373917,
				1381524, 1381887, 1383376, 1384593, 1388591, 1405485, 1408584, 1414703, 1414914, 1427005, 1438142,
				1438175, 1444459, 1460624, 1465579, 1472403, 1487319, 1490712, 1493358, 1495897, 1496173, 1499634,
				1506484, 1508759, 1513263, 1514745, 1517026, 1519377, 1519839, 1520020, 1525722, 1547008, 1548010,
				1558491, 1570511, 1596678, 1619381, 1625424, 1629732, 1638129, 1649227, 1650728, 1654668, 1655491,
				1668069, 1668978, 1673313, 1675448, 1675643, 1679475, 1681498, 1684417, 1691236, 1691308, 1702118,
				1702369, 1710762, 1720648, 1722155, 1722287, 1729237, 1742149, 1749790, 1759828, 1764211, 1766834,
				1779581, 1781305, 1783031, 1794177, 1797625, 1805986, 1809031, 1812115, 1815478, 1816517, 1819021,
				1833036, 1836369, 1875029, 1881280, 1887592, 1899718, 1923152, 1923470, 1926347, 1933799, 1945494,
				1946341, 1948643, 1949831, 1952210, 1953501, 1955731, 1960658, 1960824, 1981514 };
		int[] compressed = iic.compress(input);
		int[] expecteds = new int[] { 128, 336596750, 2097111743, 806635265, 444072387, 1526747104, 6664195, 294655060,
				-1608214780, 597426401, 83908000, 74493967, 1175454859, 542917378, 36175942, 335613920, 27275289,
				1393562143, 1073778688, 8192756, -1056543680, 7491591, 730339791, 291642438, 46269895, 31467872,
				76488249, 367398741, 598980393, 345121021, 859637117, 994509563, 498538554, 97583467, 262014145,
				203112958, 13834215, 729886523, 1279655969, -2106888247, 97657258, -350966731, 1631619593, -1909237693,
				388533440, 154079698, -1070776089, 1429365448, -391920609, 1474705245, 444983020, 1523715282, 516429685,
				-599227593, 1464056888, -276811576, -882434148, -402356568, 843119528, 395209192, 113868932, 913794855,
				-1544271897, -2034448596, -491216465, -111105739, 881639618, 1223585605, 99434387, -2110913382,
				-1322733461, 923459166, 1031945857, 800726166, 2122731483, 1267278993, 915016594, 648429457,
				-2128522623 };
		Assert.assertArrayEquals(expecteds, compressed);
		Assert.assertArrayEquals(input, iic.uncompress(compressed));
	}

	@Test
	public void checkAbove256() {
		int[] input = new int[] { 1001436, 1001921, 1002765, 1003212, 1009609, 1014705, 1016423, 1016651, 1019657,
				1024664, 1037195, 1047343, 1048423, 1050442, 1051355, 1052941, 1053129, 1054358, 1055486, 1062517,
				1063609, 1063612, 1064349, 1064477, 1067026, 1070517, 1071809, 1072064, 1072410, 1074559, 1078950,
				1082732, 1083793, 1085732, 1089449, 1091083, 1092873, 1094920, 1094956, 1097719, 1101169, 1101430,
				1105183, 1105632, 1114540, 1117352, 1119262, 1121018, 1123116, 1130908, 1147944, 1149035, 1152300,
				1152447, 1153520, 1153590, 1158870, 1160054, 1160972, 1165054, 1167099, 1169509, 1169606, 1173298,
				1173605, 1174389, 1184126, 1186555, 1188554, 1190218, 1190707, 1194433, 1195309, 1195581, 1195825,
				1196631, 1197975, 1212238, 1212352, 1216793, 1219568, 1223601, 1223688, 1224419, 1226351, 1226400,
				1227471, 1227795, 1231138, 1236473, 1237024, 1239497, 1239933, 1242605, 1251385, 1254041, 1257989,
				1260251, 1263592, 1264086, 1270898, 1272197, 1276881, 1281447, 1283611, 1285656, 1287415, 1291664,
				1298916, 1306740, 1311876, 1312241, 1312458, 1317242, 1327938, 1328891, 1328974, 1329287, 1335282,
				1337560, 1338400, 1341347, 1342573, 1343239, 1344677, 1353188, 1353683, 1358950, 1359435, 1362494,
				1369798, 1372712, 1372920, 1373175, 1373762, 1375715, 1377030, 1379603, 1382299, 1384048, 1393170,
				1396618, 1398825, 1399248, 1403085, 1403395, 1406047, 1406335, 1409802, 1413192, 1413640, 1413967,
				1415629, 1417025, 1417826, 1418781, 1418809, 1421259, 1421528, 1422366, 1423598, 1424946, 1425618,
				1425898, 1428251, 1428741, 1430389, 1436203, 1438701, 1438782, 1439454, 1445902, 1445984, 1449534,
				1449660, 1455234, 1456454, 1458062, 1470078, 1471165, 1477216, 1477357, 1477816, 1479104, 1481023,
				1485687, 1491836, 1493628, 1494624, 1499257, 1502752, 1504015, 1505872, 1507082, 1514121, 1517352,
				1520922, 1521158, 1528824, 1529242, 1529352, 1535512, 1538362, 1541763, 1543446, 1543694, 1543831,
				1550412, 1552369, 1553434, 1555118, 1555934, 1557076, 1560039, 1560916, 1560982, 1564382, 1564932,
				1567205, 1569311, 1569920, 1573438, 1573850, 1575988, 1577041, 1580727, 1581333, 1586916, 1588781,
				1592630, 1593803, 1593912, 1600949, 1601527, 1604870, 1606694, 1608160, 1616672, 1621166, 1621694,
				1623790, 1627484, 1629359, 1630732, 1633434, 1633730, 1636288, 1636585, 1638339, 1638949, 1640293,
				1646587, 1647881, 1648316, 1652377, 1653987, 1654214, 1654792, 1658233, 1660243, 1661006, 1663524,
				1664126, 1664271, 1666906, 1672746, 1677826, 1678406, 1680962, 1681766, 1687292, 1687633, 1689296,
				1689894, 1691420, 1693694, 1698481, 1699844, 1704657, 1704729, 1707082, 1713841, 1714798, 1721149,
				1723616, 1727618, 1729034, 1732382, 1732800, 1736199, 1743496, 1743506, 1744920, 1745869, 1746219,
				1752382, 1753194, 1754191, 1756226, 1756426, 1759610, 1761460, 1763328, 1765453, 1765961, 1766002,
				1778956, 1779084, 1779913, 1790552, 1795388, 1800076, 1800660, 1802221, 1802778, 1805236, 1805300,
				1805598, 1806358, 1807654, 1810942, 1811747, 1813258, 1813286, 1815734, 1819831, 1822636, 1822638,
				1825960, 1826468, 1829953, 1831394, 1831605, 1832421, 1837612, 1840041, 1845475, 1846847, 1852800,
				1854414, 1859694, 1860322, 1862137, 1862733, 1863739, 1866387, 1879645, 1889272, 1894360, 1895466,
				1897780, 1906147, 1908961, 1909132, 1910589, 1915729, 1917028, 1917608, 1918477, 1918865, 1920611,
				1924661, 1925828, 1925886, 1928239, 1929370, 1929536, 1930648, 1933069, 1934708, 1940438, 1943842,
				1948252, 1952222, 1956224, 1956300, 1956624, 1957800, 1959217, 1960072, 1960345, 1961793, 1962921,
				1968930, 1971148, 1973888, 1974236, 1974407, 1978195, 1980381, 1981692, 1982390, 1986675, 1990885,
				1994596, 1994951, 1995171, 1995995, 1996560, 1997437 };
		int[] compressed = iic.compress(input);
		int[] expecteds = new int[] { 384, 336530958, 509560796, -268219392, 419233819, -1241432448, 933894, 955255742,
				1076949761, 70779514, -1862238672, 6496259, 1288700092, 1879336960, 71565751, -520093648, 524290,
				-634385931, -268104704, 22675471, 654345808, 15491089, 1137280037, -523484255, -1874855825, 2048235008,
				-1438612851, 750794787, 500717538, 137498040, 1889734456, -1731456888, -1945058300, 1343528960,
				-29301374, 1263566801, 483918212, -1866202829, -819595680, 512860167, 57424440, -1743830972, -305840116,
				1164183341, 1945127639, -1945408507, 1123028039, -854653680, -1541245643, -1677609946, 696394946,
				-768241812, -1677215536, 616645850, 1215579993, 1684926975, -1541647294, 95764743, -2069102375,
				1393485468, 1991265856, -1018682471, 1749852896, 1338351114, 1380720376, 235801870, -2097364507,
				-802321976, 615530432, 1159929476, 1420329603, 1579393563, 110922227, -1068658947, -1962639195,
				469979021, 108922140, -332263075, 1686117390, 219680978, 22086864, 822370346, 1728084617, 1237474008,
				-1070989292, 2004898404, 1461192675, 26346692, -1559167249, 481305431, 125768736, 25187470, -2042371044,
				331143796, -57194687, -551137299, 394035672, 33582605, 916761739, 574746729, 665177512, -1743105915,
				1462126433, 1208094939, 595870925, 2082870301, 1120954139, -476478435, 1230453797, 1230225991,
				-1686306380, -2133790576, 1342552604, 138483944, 865830960, -1911196555, -1612690934, -2032532316,
				1481900184, 1824853602, 422116816, 219024909, -1001897757, 800320821, -2003397716, -636859644,
				-1054716062, 1703299231, -964752723, 1897388106, 1252469556, 822232243, -1896395543, 1150958695,
				1755406879, 324125090, -2046809656, 367062341, 1126981708, 545206521, -829657085, 557085889,
				-1609940484, 1023542057, 776627139, 1112033601, 1747112326, 1249919014, 339750784, 1892240600,
				-1879019426, -1353449399, 217710600, -2066100097, -872361194, 636830832, 290919738, -1608959628,
				1903205652, 65931600, 1866244758, 345235606, -2101571423, -1005229314, 1362758166, 551109768, -96022004,
				270340669, 696833683, -378199360, -1504081716, -1627057242, 1141007336, -1775987967, 1343295915,
				-1144448501, 888678220, 729963669, 178080897, 982130577, 1923169669, 1671200672, 948001922, 1837380998,
				134 };
		Assert.assertArrayEquals(expecteds, compressed);
		Assert.assertArrayEquals(input, iic.uncompress(compressed));
	}

}
